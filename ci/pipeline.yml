---
jobs:
  - name: scan
    public: true
    plan:
    - get: infrastructure-repo
      trigger: true
    - put: commit-status
      params:
        commit: infrastructure-repo
        state: pending
    - aggregate:
      - task: terraform-format
        config:
          platform: linux
          image_resource:
            type: docker-image
            source: {repository: hashicorp/terraform, tag: "light"}
          inputs:
            - name: infrastructure-repo
          run:
            path: sh
            args: ["infrastructure-repo/ci/scripts/format.sh"]
      - task: tflint
        config:
          platform: linux
          image_resource:
            type: docker-image
            source: {repository: wata727/tflint, tag: "latest"}
          inputs:
            - name: infrastructure-repo
          run:
            path: sh
            args: ["infrastructure-repo/ci/scripts/scan.sh"]
    on_failure:
      put: commit-status
      params:
        commit: infrastructure-repo
        state: failure

  - name: scan-pr
    public: true
    plan:
    - get: infrastructure-repo
    - get: pull-request
      trigger: true
      version: every
    - put: pull-request
      params:
        path: pull-request
        status: pending
    - task: terraform-format
      config:
        platform: linux
        image_resource:
          type: docker-image
          source: {repository: hashicorp/terraform, tag: "light"}
        inputs:
          - name: infrastructure-repo
          - name: pull-request
        outputs:
          - name: pr-comment
        run:
          path: sh
          args: ["infrastructure-repo/ci/scripts/format.sh"]
      on_failure:
        put: pull-request
        params:
          path: pull-request
          status: failure
          context: terraform-format
          comment: "pr-comment/comment"
    - task: tflint
      config:
        platform: linux
        image_resource:
          type: docker-image
          source: {repository: wata727/tflint, tag: "latest"}
        inputs:
          - name: infrastructure-repo
        outputs:
          - name: pr-comment
        run:
          path: sh
          args: ["infrastructure-repo/ci/scripts/scan.sh"]
      on_failure:
        put: pull-request
        params:
          path: pull-request
          status: failure
          context: tflint
          comment: "pr-comment/comment"
    on_success:
      put: pull-request
      params:
        path: pull-request
        status: success

  - name: build
    public: true
    serial_groups: [version]
    plan:
      - aggregate:
        - get: vault
          params:
            paths:
              - aws/therasec-stage/sts/aws-global-admin
              - aws/therasec-prod/sts/aws-global-admin
        - get: infrastructure-repo
          passed: ["scan"]
          trigger: true
        - get: version
          params: {pre: rc}
      - task: get-credentials
        config:
          platform: linux
          image_resource:
            type: docker-image
            source: {repository: digitalgenius/alpine-jq-git, tag: "latest"}
          inputs:
          - name: vault
          - name: infrastructure-repo
          outputs:
          - name: aws-creds
          run:
            path: sh
            args: ["infrastructure-repo/ci/scripts/get_aws_credentials.sh"]
      - task: build
        config:
          platform: linux
          image_resource:
            type: docker-image
            source: {repository: hashicorp/terraform, tag: "light"}
          inputs:
            - name: aws-creds
            - name: infrastructure-repo
            - name: version
          outputs:
            - name: terraform-plan-out
          run:
            path: sh
            args: ["infrastructure-repo/ci/scripts/build.sh"]
      - put: infrastructure-repo-artifacts
        params: {file: terraform-plan-out/terraform-plan-*.tgz}
      - put: version
        params: {file: version/number}
    on_failure:
      put: commit-status
      params:
        commit: infrastructure-repo
        state: failure
    on_success:
      do:
        - put: commit-status
          params:
            commit: infrastructure-repo
            state: success
        - put: send-email
          params:
            subject_text: "[concourse-ci] ((github-org))/((github-repo)) build successful: ${BUILD_PIPELINE_NAME}/${BUILD_JOB_NAME}/${BUILD_NAME}"
            body_text: "Click here to provision resources: ${ATC_EXTERNAL_URL}/teams/main/pipelines/${BUILD_PIPELINE_NAME}/jobs/provision"

  - name: provision
    public: true
    serial_groups: [version]
    plan:
      - aggregate:
        - get: vault
          params:
            paths:
              - aws/therasec-stage/sts/aws-global-admin
              - aws/therasec-prod/sts/aws-global-admin
        - get: infrastructure-repo
          passed: ["build"]
        - get: infrastructure-repo-artifacts
          passed: ["build"]
        - get: version
          params: {bump: final}
      - task: get-credentials
        config:
          platform: linux
          image_resource:
            type: docker-image
            source: {repository: digitalgenius/alpine-jq-git, tag: "latest"}
          inputs:
          - name: vault
          - name: infrastructure-repo
          outputs:
          - name: aws-creds
          run:
            path: sh
            args: ["infrastructure-repo/ci/scripts/get_aws_credentials.sh"]
      - task: provision
        config:
          platform: linux
          image_resource:
            type: docker-image
            source: {repository: hashicorp/terraform, tag: "light"}
          inputs:
            - name: aws-creds
            - name: infrastructure-repo
            - name: infrastructure-repo-artifacts
            - name: version
          outputs:
            - name: release
          run:
            path: sh
            args: ["infrastructure-repo/ci/scripts/provision.sh"]
      - put: version
        params: { bump: final }
      - put: release
        params:
          name: release/name
          tag:  release/tag
    on_failure:
      put: commit-status
      params:
        commit: infrastructure-repo
        state: error


  - name: bump-major
    serial_groups: [version]
    plan:
    - put: version
      params: {bump: major}

  - name: bump-minor
    serial_groups: [version]
    plan:
    - put: version
      params: {bump: minor}

  - name: bump-patch
    serial_groups: [version]
    plan:
    - get: version
      passed: [provision]
      trigger: true
    - put: version
      params: {bump: patch, pre: rc}


resources:
- name: infrastructure-repo
  type: git
  source:
    uri: ((github-uri))
    branch: ((github-repo-branch))
    private_key: ((github-private-key))

- name: commit-status
  type: github-status
  source:
    repository: ((github-org))/((github-repo))
    access_token: ((github-access-token))
    branch: ((github-repo-branch))
    context: concourse-ci

- name: release
  type: github-release
  source:
    owner: ((github-org))
    repository: ((github-repo))
    access_token: ((github-access-token))

- name: pull-request
  type: pull-request
  source:
    access_token: ((github-access-token))
    private_key:  ((github-private-key))
    repo: ((github-org))/((github-repo))
    base: ((github-repo-branch))

- name: version
  type: semver
  source:
    driver: git
    initial_version: 0.0.1
    uri: ((github-uri))
    branch: version
    file: version
    private_key: ((github-private-key))

- name: infrastructure-repo-artifacts
  type: s3
  source:
    bucket: terraform-pipeline-rc
    regexp: terraform-plan-(.*).tgz
    access_key_id: ((s3-access-key-id))
    secret_access_key: ((s3-secret-access-key))

- name: vault
  type: vault
  source:
    url: ((vault-addr))
    auth_method: AppRole
    role_id: ((vault-role-id))
    secret_id: ((vault-secret-id))

- name: send-email
  type: email
  source:
    smtp:
      host: ((smtp-host))
      port: ((smtp-port))
      username: ((smtp-username))
      password: ((smtp-password))
    from: ((email-from))
    to: [ ((email-from)) ]

resource_types:
  - name: vault
    type: docker-image
    source:
      repository: docurated/concourse-vault-resource
      tag: latest

  - name: github-status
    type: docker-image
    source:
      repository: dpb587/github-status-resource
      tag: master

  - name: pull-request
    type: docker-image
    source:
      repository: jtarchie/pr

  - name: email
    type: docker-image
    source:
      repository: pcfseceng/email-resource
